[{"path":"https://atsyplenkov.github.io/HBVr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 HBVr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://atsyplenkov.github.io/HBVr/articles/Download-HBV-parameters.html","id":"disclaimer-preprocessing-logic","dir":"Articles","previous_headings":"","what":"1) Disclaimer & Preprocessing logic","title":"Download HBV parameters","text":"Beneath example can one download preprocess HBV parameter maps (v0.8) created Beck et al. (2020). initial dataset distributed NetCDF file. contains ten cross-validation folds 12 parameters: BETA – Shape coefficient recharge function FC – Maximum soil moisture storage (mm) K0 – Recession coefficient upper zone (day−1) K1 – Recession coefficient upper zone (day−1) K2 – Recession coefficient lower zone (day−1) LP – Soil moisture value actual evaporation reaches potential evaporation PERC – Maximum percolation lower zone (mm day−1) UZL – Threshold parameter extra outflow upper zone (mm) TT – Threshold temperature (°C) CFMAX – Degree‐day factor (mm °−11 day−1) CFR – Refreezing coefficient CWH – Water holding capacity converted every fold Cloud-Optimized GeoTiff (COG) using following GDAL command: gdal_translate ordinary.tif COG.tiff -co COPY_SRC_OVERVIEWS=YES -co COMPRESS=LZW -co TILED=YES. final COG validated using python script. Thus ended 10 COGs 12 bands .","code":""},{"path":"https://atsyplenkov.github.io/HBVr/articles/Download-HBV-parameters.html","id":"example-workflow","dir":"Articles","previous_headings":"","what":"2) Example workflow","title":"Download HBV parameters","text":"essential aim hbv_get_parameters function ease accessibility HBV parameter maps created Beck et al. (2020). Therefore function allows download cross-validation folds particular area interest (AOI). Let’s imagine, need download first, second fifth folds Luxembourg. Initially, hbv_get_parameters function two types output. First mean zonal statistics computed terra::global background. Second one simple SpatRaster output. download 1, 2 5 folds need specify function. example can retrieve mean values entire Luxembourg. output zonal_stat hidden ↓ download SpatRaster objects need run following code chunk: output rasters hidden ↓ function returns list SpatRaster objects. first one, .e. Fold 1, can plotted like :","code":"library(HBVr) #> Loading required package: terra #> terra 1.6.7 # library(tmap) # for vizualisztion purposes # library(sf) # for vizualisztion purposes  # Locate the shapefile f <- system.file(\"ex/lux.shp\", package=\"terra\") # Read it as SpatVector v <- vect(f)  # Plot it! # tmap_mode(\"view\") #  # tm_basemap(\"Stamen.Terrain\") + #   tm_shape(st_as_sf(v)) + #   tm_polygons() zonal_stat <-    hbv_get_parameters(     aoi = v,     folds = c(1, 2, 5),     mean = TRUE   ) #> Downloading rasters... #> Cropping rasters... zonal_stat #> $fold_1 #>               mean #> beta    3.28827362 #> FC    397.27255745 #> K0      0.45688133 #> K1      0.33620186 #> K2      0.15122986 #> LP      0.67929192 #> PERC    6.54499855 #> UZL    73.98409042 #> TT     -3.25675583 #> CFMAX   4.50942764 #> CFR     0.08118668 #> CWH     0.18391457 #>  #> $fold_2 #>               mean #> beta    3.40123062 #> FC    181.61276817 #> K0      0.15298271 #> K1      0.30910225 #> K2      0.12298813 #> LP      0.40615349 #> PERC    7.60681343 #> UZL    64.74375725 #> TT     -0.36138115 #> CFMAX   5.41066704 #> CFR     0.01381912 #> CWH     0.16261673 #>  #> $fold_5 #>               mean #> beta    4.60768394 #> FC    348.73093376 #> K0      0.26133881 #> K1      0.20693245 #> K2      0.16530495 #> LP      0.93026009 #> PERC    1.82667274 #> UZL    49.68159256 #> TT     -1.33735924 #> CFMAX   6.17519302 #> CFR     0.02514114 #> CWH     0.10989838 rasters <-    hbv_get_parameters(     aoi = v,     folds = c(1, 2, 5),     mean = FALSE   ) #> Downloading rasters... #> Cropping rasters... #> Projecting rasters... rasters #> $fold_1 #> class       : SpatRaster  #> dimensions  : 15, 16, 12  (nrow, ncol, nlyr) #> resolution  : 0.04998981, 0.04998981  (x, y) #> extent      : 5.749202, 6.549039, 49.43621, 50.18605  (xmin, xmax, ymin, ymax) #> coord. ref. : +proj=longlat +datum=WGS84 +no_defs  #> source      : memory  #> names       :     beta,        FC,        K0,        K1,         K2,        LP, ...  #> min values  : 1.280844,  87.36705, 0.1660908, 0.1255526, 0.08126038, 0.5035474, ...  #> max values  : 4.703930, 782.77252, 0.6295767, 0.4307190, 0.20001221, 0.7953050, ...  #>  #> $fold_2 #> class       : SpatRaster  #> dimensions  : 15, 16, 12  (nrow, ncol, nlyr) #> resolution  : 0.04998981, 0.04998981  (x, y) #> extent      : 5.749202, 6.549039, 49.43621, 50.18605  (xmin, xmax, ymin, ymax) #> coord. ref. : +proj=longlat +datum=WGS84 +no_defs  #> source      : memory  #> names       :     beta,       FC,         K0,        K1,        K2,        LP, ...  #> min values  : 1.000000,  65.5924, 0.04998779, 0.1619923, 0.0753507, 0.2000122, ...  #> max values  : 5.999515, 360.8982, 0.31310526, 0.4385946, 0.1725364, 0.7933550, ...  #>  #> $fold_5 #> class       : SpatRaster  #> dimensions  : 15, 16, 12  (nrow, ncol, nlyr) #> resolution  : 0.04998981, 0.04998981  (x, y) #> extent      : 5.749202, 6.549039, 49.43621, 50.18605  (xmin, xmax, ymin, ymax) #> coord. ref. : +proj=longlat +datum=WGS84 +no_defs  #> source      : memory  #> names       :     beta,       FC,         K0,         K1,         K2,        LP, ...  #> min values  : 2.849582, 222.5757, 0.04999479, 0.05236027, 0.07841196, 0.6440166, ...  #> max values  : 5.777176, 459.7742, 0.68407023, 0.29351634, 0.20001221, 1.0000000, ... plot(rasters[[1]])"},{"path":"https://atsyplenkov.github.io/HBVr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Anatoly Tsyplenkov. Maintainer, author.","code":""},{"path":"https://atsyplenkov.github.io/HBVr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Tsyplenkov (2022). HBVr: Get HBV Parameters. https://github.com/atsyplenkov/HBVr, https://atsyplenkov.github.io/HBVr/.","code":"@Manual{,   title = {HBVr: Get HBV Parameters},   author = {Anatoly Tsyplenkov},   year = {2022},   note = {https://github.com/atsyplenkov/HBVr, https://atsyplenkov.github.io/HBVr/}, }"},{"path":"https://atsyplenkov.github.io/HBVr/index.html","id":"hbvr-","dir":"","previous_headings":"","what":"Get HBV Parameters","title":"Get HBV Parameters","text":"goal HBVr ease accessebility HBV Global Parameter maps created Beck et al. (2020). Therefore one-function package allows download cross-validation folds particular area interest (AOI).","code":""},{"path":"https://atsyplenkov.github.io/HBVr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Get HBV Parameters","text":"can install development version HBVr GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"atsyplenkov/HBVr\")"},{"path":"https://atsyplenkov.github.io/HBVr/index.html","id":"disclaimer","dir":"","previous_headings":"","what":"Disclaimer","title":"Get HBV Parameters","text":"HBVr redistribute data provide way, encourage users cite original papers using package: Beck , Pan M, Lin P, Seibert J, van Dijk AIJM, Wood EF. 2020. Global Fully Distributed Parameter Regionalization Based Observed Streamflow 4,229 Headwater Catchments. Journal Geophysical Research: Atmospheres 125 : e2019JD031485. DOI: 10.1029/2019JD03148","code":""},{"path":"https://atsyplenkov.github.io/HBVr/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Get HBV Parameters","text":"can download mean zonal statistics retrieve SpatRaster objects:","code":"library(HBVr)  # Locate the shapefile f <- system.file(\"ex/lux.shp\", package=\"terra\") # Read it as SpatVector v <- vect(f)  zonal_stat <-    hbv_get_parameters(     aoi = v,     folds = 1,     mean = TRUE   ) #> Downloading rasters... #> Cropping rasters...  zonal_stat #> $fold_1 #>               mean #> beta    3.28827362 #> FC    397.27255745 #> K0      0.45688133 #> K1      0.33620186 #> K2      0.15122986 #> LP      0.67929192 #> PERC    6.54499855 #> UZL    73.98409042 #> TT     -3.25675583 #> CFMAX   4.50942764 #> CFR     0.08118668 #> CWH     0.18391457 rasters <-      hbv_get_parameters(     aoi = v,     folds = 1,     mean = FALSE   ) #> Downloading rasters... #> Cropping rasters... #> Projecting rasters...  plot(rasters[[1]])"},{"path":"https://atsyplenkov.github.io/HBVr/reference/hbv_get_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Download Global HBV Parameter Maps — hbv_get_parameters","title":"Download Global HBV Parameter Maps — hbv_get_parameters","text":"function download Global HBV Parameter Maps (v0.8) created Beck et al. (2020) crop shapefile boundaries.","code":""},{"path":"https://atsyplenkov.github.io/HBVr/reference/hbv_get_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download Global HBV Parameter Maps — hbv_get_parameters","text":"","code":"hbv_get_parameters(aoi, folds = 1:10, mean = FALSE, warp = TRUE)"},{"path":"https://atsyplenkov.github.io/HBVr/reference/hbv_get_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download Global HBV Parameter Maps — hbv_get_parameters","text":"aoi SpatVector. polygon layer area interest. folds Numeric. numeric vector 1 10 indicating folds numbers process. mean Logical. TRUE, return mean zonal statistics, calculated using global method terra package warp Logical. TRUE, reproject HBV rasters aoi projection","code":""},{"path":"https://atsyplenkov.github.io/HBVr/reference/hbv_get_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download Global HBV Parameter Maps — hbv_get_parameters","text":"List","code":""},{"path":"https://atsyplenkov.github.io/HBVr/reference/hbv_get_parameters.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Download Global HBV Parameter Maps — hbv_get_parameters","text":"Beck , Pan M, Lin P, Seibert J, van Dijk AIJM, Wood EF. 2020. Global Fully Distributed Parameter Regionalization Based Observed Streamflow 4,229 Headwater Catchments. Journal Geophysical Research: Atmospheres 125 : e2019JD031485. DOI: 10.1029/2019JD031485","code":""},{"path":"https://atsyplenkov.github.io/HBVr/reference/hbv_get_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download Global HBV Parameter Maps — hbv_get_parameters","text":"","code":"# Load shapefile f <- system.file(\"ex/lux.shp\", package=\"terra\") v <- vect(f)  # Get zonal statisitcs fold1_mean <- hbv_get_parameters(v, folds = 1, mean = TRUE, warp = FALSE) #> Downloading rasters... #> Loading required namespace: pbapply #> Cropping rasters... fold1_mean #> $fold_1 #>               mean #> beta    3.28827362 #> FC    397.27255745 #> K0      0.45688133 #> K1      0.33620186 #> K2      0.15122986 #> LP      0.67929192 #> PERC    6.54499855 #> UZL    73.98409042 #> TT     -3.25675583 #> CFMAX   4.50942764 #> CFR     0.08118668 #> CWH     0.18391457 #>   # Get rasters fold1_raster <- hbv_get_parameters(v, folds = 1, mean = FALSE, warp = FALSE) #> Downloading rasters... #> Cropping rasters... plot(fold1_raster[[1]])"}]
